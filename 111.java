//Целочисленные
byte b = 3; //от -128 до 127. Хранит 8 бит, т.е. 2^8=256 значений.
short sh = 257; //от -32768 до 32767. Хранит 16 бит. Мне лень считать, но это 1024 * 64 значений
char ch = 14; //Хранит беззнаковое число - символ UTF-16 (буквы, цифры) Unicode
int i = 35791; //от -2147483648 до 2147483647. Хранит 32 бита. Или 1024 * 1024 * 1024 * 4. Многовато
long l = 24680246802; //от  -9223372036854775808L до 9223372036854775807L. Хранит 64 бит. Т.е. много

//С плавающей точкой
float f = 3.14f; //От 1.4e-45f до 3.4e+38f. Хранит 32 бит. Требует суффикс f в конце (для float)
double d = 9.8; //От 4.9e-324 до 1.7e+308. Хранит 64 бит. Двойная точность. Суффикс не требуется

//Логический тип
boolean boo = true; //Значения: true и false. 

//текст
String name = "Ivan"; //для таких текстов, как "Привет" 
Integer num = n; //число-объект (число в виде строки)
str.length();  // возвращает длину строки str (количество символов, включая пробелы)
str1.equals(str2); // Сравнивает строки str1 и str2  (метод является булевым true, если строки равны, и false, если нет) 
xxx.indexOf('b'); //ищет в строке заданный символ (или строку), и возвращает  индекс его первого вхождения. Если элемент не найден, метод возвращает -1.
xxx.charAt(4); //Получение элемента строки по его индексу (char, а не String)
xxx.isEmpty(); //Он возвращает false, если строка содержит какие-либо элементы
str1.contains(str2); //проверяет, содержится ли одна строка внутри другой, и возвращает соответствующее логическое значение - true или false
xxxtoUpperCase() / xxxtoLowerCase() //приводят всю строку в верхний и нижний регистр соответственно
Integer.toString(n); //метод предоставляет число в виде строки нужно воспользоваться классом - обёрткой Integer
valueOf(); //преобразует строку в число нужного типа
parseInt(); //преобразования строки в число Int
Double.parseDouble(str); //преобразования строки в число double
str.substring(6, 16); //возвращает новую строку, которая является подстрокой данной строки. Подстрока начинается с символа, заданного индексом, и продолжается до конца данной строки или до указанного индекса.
(str.replace('о', 'А')); //может заменить один символ на другой. Этот метод не изменяет строку, а собирает новую по заданным параметрам. Метод принимает два обязательных параметра - символ, подлежащий замене, и символ, на который его нужно заменить.
System.out.println("Python".charAt(0) > "Java".charAt(0)); // на выходе true //  Сравниваем первые буквы

//Ввод в программу
nextInt()  Ввести объект int
nextFloat() Ввести объект float
nextDouble() Ввести объект double
nextBoolean() Ввести объект boolean
nextLine() Ввести строку целиком
next() Ввести слово (считывается до первого пробела)

Класс Scanner его импорт
import java.util.Scanner; 
Scanner xy = new Scanner(System.in);

//Математические операторы
операндом (6 и 3) и оператор (+). +	Сложение
-	Вычитание
*	Умножение
/	Целочисленное деление
%	Остаток от деления 
++ x; увеличивает на 1 число (инкремент)
-- x; уменьшает на 1 число (декремент)
Префикс: инкремент увеличивает значение переменной и использует новое значение в выражении.
int x = 50;
int y = ++x; // x == 51, y == 51
Постфикс: значение переменной сначала используется в выражении, а уже потом увеличивается на единицу. 
int x = 50;
int y = x++; // x == 51, y == 50

Math.abs(x) модуль значения x
String.valueOf(num) преобразование числа num в строку num 
x += y;    // То же самое, что и x = x + y;
int x = 4;
x += 2; // x == 6

x -= y;    // То же самое, что и x = x - y;
x *= y;    // То же самое, что и x = x * y;
x /= y;    // То же самое, что и x = x / y;
x %= y;    // То же самое, что и x = x % y;
int x = 6 + 3;
int sum1 = 50 +(-) 10; 
int sum2 = sum1 +(-) 66; 
int sum3 = sum2 +(-) sum2;
int myVar = 37;
int res = myVar % 5; // res = 2


